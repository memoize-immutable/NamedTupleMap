{"version":3,"sources":["../index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["function NamedTupleMap( opts ) {\n  if ( opts && 'limit' in opts ) {\n    this._limit = opts.limit;\n  }\n  this.clear();\n}\n\nNamedTupleMap.prototype = {\n  toString: function() {\n    return '[object NamedTupleMap]';\n  },\n  _hash: function( tuple ) {\n    // Speed up hash generation for the folowing pattern:\n    // if ( !cache.has(t) ) { cache.set( t, slowFn(t) ); }\n    if ( tuple === this._lastTuple ) {\n      return this._lastHash;\n    }\n\n    const names = Object.keys(tuple);\n    const l = names.length;\n    const hash = [];\n\n    for ( let i = 0; i < l; i++ ) {\n      const name = names[i];\n      const arg = tuple[name];\n      const argType = typeof arg;\n\n      // if the argument is not a primitive, get a unique (memoized?) id for it\n      // (typeof null is \"object\", but should be considered a primitive)\n      if ( arg !== null && ( argType === 'object' || argType === 'function' ) ) {\n        if ( this._idMap.has( arg ) ) {\n          hash.push( this._idMap.get(arg) );\n        } else {\n          const id = '#' + this._id++;\n          this._idMap.set( arg, id );\n          hash.push( id );\n        }\n\n      // otherwise, add the argument and its type to the hash\n      } else {\n        hash.push( argType === 'string' ? '\"' + arg + '\"' : '' + arg );\n      }\n    }\n\n    hash.push('{\"' + names.join('\",\"') + '\"}');\n\n    this._lastTuple = tuple;\n    // concatenate serialized arguments using a complex separator\n    // (to avoid key collisions)\n    this._lastHash = hash.join('/<[MI_SEP]>/');\n\n    return this._lastHash;\n  },\n\n  has: function( tuple ) {\n    const hash = this._hash( tuple );\n    return this._cache.has( hash );\n  },\n\n  set: function( tuple, value ) {\n    const hash = this._hash( tuple );\n\n    if ( this._limit !== undefined ) {\n      this._cache.delete( hash );\n    }\n\n    this._cache.set( hash, value );\n\n    if ( this._limit !== undefined && this._cache.size > this._limit ) {\n      this._cache.delete( this._cache.keys().next().value );\n    }\n\n    return this;\n  },\n\n  get: function( tuple ) {\n    const hash = this._hash( tuple );\n\n    if ( this._limit !== undefined && this._cache.has( hash ) ) {\n      const value = this._cache.get( hash );\n      this._cache.delete( hash );\n      this._cache.set( hash, value );\n      return value;\n    }\n\n    return this._cache.get( hash );\n  },\n\n  clear: function() {\n    this._cache = new Map();\n    this._idMap = new WeakMap();\n    this._id = 0;\n    delete this._lastTuple;\n    delete this._lastHash;\n  },\n};\n\nexport default NamedTupleMap;\n"]}